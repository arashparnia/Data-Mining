docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
#docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
#docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
#docs <- tm_map(docs, removeWords, c("blabla1", "blabla2"))
# Remove punctuations
#docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
# docs <- tm_map(docs, stemDocument)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
#hist(ODI$time)
#plot(data = data, x = $Timestamp)
#install.packages("plotly")
#library(plotly)
#packageVersion('plotly')
#p <- plot_ly(ODI, labels = ~machine_learning ,values = count(~machine_learning), type = 'pie')
#p
# findFreqTerms(dtm, lowfreq = 4)
# findAssocs(dtm, terms = "freedom", corlimit = 0.3)
# barplot(d[1:10,]$freq, las = 2, names.arg = d[1:10,]$word,
#         col ="lightblue", main ="Most frequent words",
#         ylab = "Word frequencies")
levels(ODI$gender)
#levels(ODI$chocolate)
reg=lm(random~gender,data=ODI)
summary(reg)
levels(ODI$gender)
#levels(ODI$chocolate)
reg=lm(random~gender,data=ODI)
#summary(reg)
rm(list = setdiff(ls(), lsf.str()))
# Install
#install.packages("tm")  # for text mining
#install.packages("SnowballC") # for text stemming
#install.packages("wordcloud") # word-cloud generator
#install.packages("RColorBrewer") # color palettes
# Load
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
library(readr)
#file_path = file.path( "~", "Google Drive","VU", "Data mining" ,"SmsCollection.csv")
file_path = file.path( "ODI-2017.csv")
ODI <- read.csv(file_path,header =TRUE,sep = ",",stringsAsFactors = TRUE,fill = TRUE)
class(ODI)
dim(ODI)
names(ODI)
colnames(ODI)[1] <- "time"
colnames(ODI)[2] <- "program"
colnames(ODI)[3] <- "machine_learning"
colnames(ODI)[4] <- "information_retrival"
colnames(ODI)[5] <- "stats"
colnames(ODI)[6] <- "database"
colnames(ODI)[7] <- "gender"
colnames(ODI)[8] <- "chocolate"
colnames(ODI)[9] <- "birthday"
colnames(ODI)[10] <- "neighbors"
colnames(ODI)[11] <- "stand"
colnames(ODI)[12] <- "money"
colnames(ODI)[13] <- "random"
colnames(ODI)[14] <- "bed_time"
colnames(ODI)[15] <- "good_day_1"
colnames(ODI)[16] <- "good_day_2"
head(ODI)
ODI$time <- as.Date(ODI$time, format = "%d/%m/%Y %H:%M:%S")
summary(ODI)
f <- ODI$random
f <- as.numeric(levels(f)[f])
head(f)
length(f)
f <- na.omit(f);
head(f)
length(f)
f
barplot(table(ODI$machine_learning))
barplot(prop.table(table(ODI$machine_learning)))
gd1 <- data.frame(ODI$good_day_1)
gd2 <- data.frame(ODI$good_day_2)
good_day <- cbind(gd1,gd2)
head(good_day)
#barplot(table(cat(ODI$good_day_1 , ODI$good_day_2))]
gd1 <- ODI$good_day_1
gd2 <- ODI$good_day_2
# combining good day answers
gd <- data.frame(gd1,gd2)
docs <- Corpus(VectorSource(gd[,2]))
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
#docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
#docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
#docs <- tm_map(docs, removeWords, c("blabla1", "blabla2"))
# Remove punctuations
#docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
# docs <- tm_map(docs, stemDocument)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
#hist(ODI$time)
#plot(data = data, x = $Timestamp)
#install.packages("plotly")
#library(plotly)
#packageVersion('plotly')
#p <- plot_ly(ODI, labels = ~machine_learning ,values = count(~machine_learning), type = 'pie')
#p
# findFreqTerms(dtm, lowfreq = 4)
# findAssocs(dtm, terms = "freedom", corlimit = 0.3)
# barplot(d[1:10,]$freq, las = 2, names.arg = d[1:10,]$word,
#         col ="lightblue", main ="Most frequent words",
#         ylab = "Word frequencies")
levels(ODI$gender)
#levels(ODI$chocolate)
reg=lm(random~gender,data=ODI)
#summary(reg)
rm(list = setdiff(ls(), lsf.str()))
install.packages("tm")  # for text mining
install.packages("SnowballC") # for text stemming
install.packages("wordcloud") # word-cloud generator
install.packages("RColorBrewer") # color palettes
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
rm(list = setdiff(ls(), lsf.str()))
# install.packages("tm")  # for text mining
# install.packages("SnowballC") # for text stemming
# install.packages("wordcloud") # word-cloud generator
# install.packages("RColorBrewer") # color palettes
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
rm(list = setdiff(ls(), lsf.str()))
# install.packages("tm")  # for text mining
# install.packages("SnowballC") # for text stemming
# install.packages("wordcloud") # word-cloud generator
install.packages("RColorBrewer") # color palettes
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
install.packages("RColorBrewer")
rm(list = setdiff(ls(), lsf.str()))
# install.packages("tm")  # for text mining
# install.packages("SnowballC") # for text stemming
# install.packages("wordcloud") # word-cloud generator
install.packages("RColorBrewer") # color palettes
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
rm(list = setdiff(ls(), lsf.str()))
install.packages("tm")  # for text mining
install.packages("SnowballC") # for text stemming
install.packages("wordcloud") # word-cloud generator
install.packages("RColorBrewer") # color palettes
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")  # for text mining
install.packages("tm")
install.packages("tm")
install.packages("tm")
install.packages("tm")  # for text mining
install.packages("tm")
install.packages("tm")
rm(list = setdiff(ls(), lsf.str()))
install.packages("tm")  # for text mining
install.packages("SnowballC") # for text stemming
install.packages("tm")
install.packages("wordcloud") # word-cloud generator
install.packages("RColorBrewer") # color palettes
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
install.packages("NLP")
install.packages("RColorBrewer")
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
# rm(list = setdiff(ls(), lsf.str()))
#
# install.packages("tm")  # for text mining
# install.packages("SnowballC") # for text stemming
# install.packages("wordcloud") # word-cloud generator
# install.packages("RColorBrewer") # color palettes
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
library(readr)
#file_path = file.path( "~", "Google Drive","VU", "Data mining" ,"SmsCollection.csv")
file_path = file.path( "ODI-2017.csv")
ODI <- read.csv(file_path,header =TRUE,sep = ",",stringsAsFactors = TRUE,fill = TRUE)
class(ODI)
dim(ODI)
names(ODI)
colnames(ODI)[1] <- "time"
colnames(ODI)[2] <- "program"
colnames(ODI)[3] <- "machine_learning"
colnames(ODI)[4] <- "information_retrival"
colnames(ODI)[5] <- "stats"
colnames(ODI)[6] <- "database"
colnames(ODI)[7] <- "gender"
colnames(ODI)[8] <- "chocolate"
colnames(ODI)[9] <- "birthday"
colnames(ODI)[10] <- "neighbors"
colnames(ODI)[11] <- "stand"
colnames(ODI)[12] <- "money"
colnames(ODI)[13] <- "random"
colnames(ODI)[14] <- "bed_time"
colnames(ODI)[15] <- "good_day_1"
colnames(ODI)[16] <- "good_day_2"
head(ODI)
ODI$time <- as.Date(ODI$time, format = "%d/%m/%Y %H:%M:%S")
summary(ODI)
f <- ODI$random
f <- as.numeric(levels(f)[f])
head(f)
length(f)
f <- na.omit(f);
head(f)
length(f)
f
barplot(table(ODI$machine_learning))
barplot(prop.table(table(ODI$machine_learning)))
gd1 <- data.frame(ODI$good_day_1)
gd2 <- data.frame(ODI$good_day_2)
good_day <- cbind(gd1,gd2)
head(good_day)
#barplot(table(cat(ODI$good_day_1 , ODI$good_day_2))]
gd1 <- ODI$good_day_1
gd2 <- ODI$good_day_2
# combining good day answers
gd <- data.frame(gd1,gd2)
docs <- Corpus(VectorSource(gd[,2]))
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
#docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
#docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
#docs <- tm_map(docs, removeWords, c("blabla1", "blabla2"))
# Remove punctuations
#docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
# docs <- tm_map(docs, stemDocument)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
#hist(ODI$time)
#plot(data = data, x = $Timestamp)
#install.packages("plotly")
#library(plotly)
#packageVersion('plotly')
#p <- plot_ly(ODI, labels = ~machine_learning ,values = count(~machine_learning), type = 'pie')
#p
# findFreqTerms(dtm, lowfreq = 4)
# findAssocs(dtm, terms = "freedom", corlimit = 0.3)
# barplot(d[1:10,]$freq, las = 2, names.arg = d[1:10,]$word,
#         col ="lightblue", main ="Most frequent words",
#         ylab = "Word frequencies")
levels(ODI$gender)
#levels(ODI$chocolate)
reg=lm(random~gender,data=ODI)
#summary(reg)
View(ODI)
plot(ODI$gender,ODI$random)
plot(ODI$random,ODI$gender)
# plot(ODI$random,ODI$gender)
hist(ODI$gender)
# plot(ODI$random,ODI$gender)
hist(ODI$random)
# plot(ODI$random,ODI$gender)
random_number <- as.numeric(ODI$random)
hist(random_number)
# plot(ODI$random,ODI$gender)
random_number <- as.numeric(ODI$random)
hist(random_number,ODI$gender)
# plot(ODI$random,ODI$gender)
random_number <- as.numeric(ODI$random)
plot(random_number)
# plot(ODI$random,ODI$gender)
random_number <- as.numeric(ODI$random)
plot(random_number,ODI$gender)
# plot(ODI$random,ODI$gender)
random_number <- as.numeric(ODI$random)
plot(ODI$gender,random_number)
# plot(ODI$random,ODI$gender)
random_number <- as.numeric(ODI$random)
plot(ODI$gender,random_number=7)
# plot(ODI$random,ODI$gender)
random_number <- as.numeric(ODI$random)
plot(ODI$gender,random_number==7)
plot(ODI$random,ODI$gender)
random_number <- as.numeric(ODI$random)
plot(ODI$gender,random_number)
plot(ODI$random,ODI$gender)
# random_number <- as.numeric(ODI$random)
# plot(ODI$gender,random_number)
# plot(ODI$random,ODI$gender)
random_number <- as.numeric(ODI$random)
plot(ODI$gender,random_number)
# plot(ODI$random,ODI$gender)
random_number <- as.numeric(ODI$random)
plot(ODI$gender,ODI$random)
# plot(ODI$random,ODI$gender)
random_number <- as.numeric(ODI$random)
length(ODI$gender = "male")
# plot(ODI$random,ODI$gender)
random_number <- as.numeric(ODI$random)
length(ODI$gender == "male")
# plot(ODI$gender,ODI$random)
# plot(ODI$random,ODI$gender)
random_number <- as.numeric(ODI$random)
length(ODI$gender == "male")
length(ODI$gender == "female")
# plot(ODI$gender,ODI$random)
# plot(ODI$random,ODI$gender)
random_number <- as.numeric(ODI$random)
length(ODI$gender == 'male')
length(ODI$gender == 'female')
# plot(ODI$gender,ODI$random)
# plot(ODI$random,ODI$gender)
random_number <- as.numeric(ODI$random)
summery(ODI$gender)
# plot(ODI$random,ODI$gender)
random_number <- as.numeric(ODI$random)
summary(ODI$gender)
# plot(ODI$gender,ODI$random)
print(xtable(summary(ODI)))
library(xtable)
print(xtable(summary(ODI)))
library(xtable)
print(xtable(summary(ODI$time)))
library(xtable)
print(xtable(summary(ODI)))
library(xtable)
# print(xtable(summary(ODI)))
print(xtable(summary(ODI)),floating=FALSE,latex.environments=NULL)
colnames(ODI)[1] <- "time"
colnames(ODI)[2] <- "program"
colnames(ODI)[3] <- "mach_lrn"
colnames(ODI)[4] <- "info_ret"
colnames(ODI)[5] <- "stats"
colnames(ODI)[6] <- "db"
colnames(ODI)[7] <- "gender"
colnames(ODI)[8] <- "chocolate"
colnames(ODI)[9] <- "birthday"
colnames(ODI)[10] <- "neighbors"
colnames(ODI)[11] <- "stand"
colnames(ODI)[12] <- "money"
colnames(ODI)[13] <- "random"
colnames(ODI)[14] <- "bed_time"
colnames(ODI)[15] <- "good_day_1"
colnames(ODI)[16] <- "good_day_2"
head(ODI)
ODI$time <- as.Date(ODI$time, format = "%d/%m/%Y %H:%M:%S")
library(xtable)
# print(xtable(summary(ODI)))
print(xtable(summary(ODI)),floating=FALSE,latex.environments=NULL)
library(xtable)
# print(xtable(summary(ODI)))
# print(xtable(summary(ODI)),floating=FALSE,latex.environments=NULL)
print(xtable(summary(ODI)),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
library(xtable)
# print(xtable(summary(ODI)))
# print(xtable(summary(ODI)),floating=FALSE,latex.environments=NULL)
print(xtable(summary(ODI[1:2,])),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
library(xtable)
# print(xtable(summary(ODI)))
# print(xtable(summary(ODI)),floating=FALSE,latex.environments=NULL)
print(xtable(summary(ODI[,1:2])),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
library(xtable)
# print(xtable(summary(ODI)))
# print(xtable(summary(ODI)),floating=FALSE,latex.environments=NULL)
print(xtable(summary(ODI[,1:4])),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
print(xtable(summary(ODI[,5:8])),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
library(xtable)
# print(xtable(summary(ODI)))
# print(xtable(summary(ODI)),floating=FALSE,latex.environments=NULL)
print(xtable(summary(ODI[,1:4])),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
print(xtable(summary(ODI[,5:8])),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
print(xtable(summary(ODI[,8:12])),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
library(xtable)
# print(xtable(summary(ODI)))
# print(xtable(summary(ODI)),floating=FALSE,latex.environments=NULL)
print(xtable(summary(ODI[,1:4])),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
print(xtable(summary(ODI[,5:8])),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
print(xtable(summary(ODI[,8:12])),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
print(xtable(summary(ODI[,12:16])),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
library(xtable)
# print(xtable(summary(ODI)))
# print(xtable(summary(ODI)),floating=FALSE,latex.environments=NULL)
print(xtable(summary(ODI[,1:4])),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
print(xtable(summary(ODI[,5:8])),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
print(xtable(summary(ODI[,9:12])),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
print(xtable(summary(ODI[,13:16])),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
library(xtable)
# print(xtable(summary(ODI)))
# print(xtable(summary(ODI)),floating=FALSE,latex.environments=NULL)
print(xtable(summary(ODI[,1:4])),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
print(xtable(summary(ODI[,5:7])),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
print(xtable(summary(ODI[,8:11])),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
print(xtable(summary(ODI[,12:16])),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
names(ODI)
print(xtable(names(ODI)),floating=FALSE,latex.environments=NULL,booktabs=TRUE)
names(ODI)
View(ODI)
